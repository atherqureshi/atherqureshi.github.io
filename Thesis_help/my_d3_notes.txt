d3.csv(string location of d3 file, function that does stuff with the data)

Example: 

d3.csv("data.csv", function (myArrayofObjects){
    myArrayofObjects.forEach(function{d}{
        console.log(d.x + d.y)
    });
});

The function creates an array and passes it into the second function that is 
just the information in data.csv parsed. This functon then calls another function
called forEach which just parses through all the data in the array one by one. 
function(d) takes the values one by oneo from myArrayofObjects cause of the 
forEach function in the form of the argument, which is conventionally called d
in d3 (standing for data).

You can also do this:

d3.tsv("../ML_Datasets/iris.tsv", function(error, data) {
    if (error) throw error;

    data.forEach(function(d) {
        //convert string from tsv to number
        d.sepalLength = +d.sepalLength;
        d.sepalWidth = +d.sepalWidth;
    }); 
});

In this case, error is a boolean flag. d3.tsv will put a 1 in this boolean flag
if it runs into some error while parsing the tsv, and will stop execution 
while throwing the error. 

also this:

d3.tsv("data.tsv", convertType, function(data))

The 2nd argument is a function that basically does the same thing as the 3rd argument,
and you can typically just convert the strings in the csv file to numbers using
the parseFloat method, or the + operator right before the object. 

Example:

function type(d){
    d.x = parseFloat(d.x);
    d.y = parseFloat(d.y);
}